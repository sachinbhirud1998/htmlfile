version: 0.2

phases:
  install:
    commands:
      - "echo \"Installing dependencies...\""
      - "apt-get update -y && apt-get install -y apt-transport-https ca-certificates curl"
      - "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -"
      - "add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\""
      - "apt-get update -y && apt-get install -y docker-ce docker-ce-cli containerd.io"

  pre_build:
    commands:
      - "echo \"Checking AWS region variables...\""
      - "echo \"AWS_DEPLOY_REGIONS_w: $AWS_DEPLOY_REGIONS_w\""
      - "echo \"AWS_DEPLOY_REGIONS_e: $AWS_DEPLOY_REGIONS_e\""
      - "export AWS_DEPLOY_REGIONS_w=$(echo \"$AWS_DEPLOY_REGIONS_w\" | tr -d '[:space:]')"
      - "export AWS_DEPLOY_REGIONS_e=$(echo \"$AWS_DEPLOY_REGIONS_e\" | tr -d '[:space:]')"
      - "echo \"Logging in to Amazon ECR in all regions...\""
      - >
        for REGION in $(echo "$AWS_DEPLOY_REGIONS_w" | tr ',' ' '); do
          echo "Logging into ECR in $REGION..."; 
          aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.$REGION.amazonaws.com || exit 1;
        done
      - >
        for REGION in $(echo "$AWS_DEPLOY_REGIONS_e" | tr ',' ' '); do
          echo "Logging into ECR in $REGION..."; 
          aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.$REGION.amazonaws.com || exit 1;
        done

  build:
    commands:
      - "echo \"Building Docker image...\""
      - "IMAGE_TAG=$(date +%Y%m%d%H%M%S)"
      - "LATEST_IMAGE_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:latest"
      - "IMAGE_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG}"
      - "docker build -t \"${IMAGE_URI}\" ."
      - "docker tag \"${IMAGE_URI}\" \"${LATEST_IMAGE_URI}\""
      - "echo \"Image built and tagged successfully: ${IMAGE_URI}, ${LATEST_IMAGE_URI}\""

  post_build:
    commands:
      - "echo \"Pushing Docker images to all regions...\""
      - >
        for REGION in $(echo "$AWS_DEPLOY_REGIONS_w" | tr ',' ' '); do
          echo "Pushing image to ECR in $REGION...";
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.$REGION.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG} || exit 1;
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.$REGION.amazonaws.com/${IMAGE_REPO_NAME}:latest || exit 1;
        done
      - >
        for REGION in $(echo "$AWS_DEPLOY_REGIONS_e" | tr ',' ' '); do
          echo "Pushing image to ECR in $REGION...";
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.$REGION.amazonaws.com/${IMAGE_REPO_NAME}:${IMAGE_TAG} || exit 1;
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.$REGION.amazonaws.com/${IMAGE_REPO_NAME}:latest || exit 1;
        done
      - "echo \"Validating image push...\""
      - "aws ecr describe-images --repository-name ${IMAGE_REPO_NAME} --region ${AWS_DEFAULT_REGION} --query 'imageDetails[*].imageTags'"

      - "echo \"Starting deployment to Kubernetes...\""
      - >
        for REGION in $(echo "$AWS_DEPLOY_REGIONS_w" | tr ',' ' '); do
          echo "Updating EKS cluster in $REGION..."; 
          aws eks update-kubeconfig --region $REGION --name my-cluster-$REGION --alias my-cluster-$REGION || exit 1;
          echo "Deploying to Kubernetes in $REGION..."; 
          kubectl set image deployment/my-deployment my-container=${AWS_ACCOUNT_ID}.dkr.ecr.$REGION.amazonaws.com/${IMAGE_REPO_NAME}:latest --record || exit 1;
          kubectl rollout status deployment/my-deployment --timeout=90s || exit 1;
          echo "Deployment successful in $REGION.";
        done
      - >
        for REGION in $(echo "$AWS_DEPLOY_REGIONS_e" | tr ',' ' '); do
          echo "Updating EKS cluster in $REGION..."; 
          aws eks update-kubeconfig --region $REGION --name my-cluster-$REGION --alias my-cluster-$REGION || exit 1;
          echo "Deploying to Kubernetes in $REGION..."; 
          kubectl set image deployment/my-deployment my-container=${AWS_ACCOUNT_ID}.dkr.ecr.$REGION.amazonaws.com/${IMAGE_REPO_NAME}:latest --record || exit 1;
          kubectl rollout status deployment/my-deployment --timeout=90s || exit 1;
          echo "Deployment successful in $REGION.";
        done

      - "echo \"Writing image definitions file...\""
      - "printf '[{\"name\":\"%s\",\"imageUri\":\"%s\"}]' \"${IMAGE_REPO_NAME}\" \"${IMAGE_URI}\" > imagedefinitions.json"
      - "cat imagedefinitions.json"

artifacts:
  files:
    - imagedefinitions.json
